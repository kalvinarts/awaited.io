{"version":3,"sources":["../src/index.js"],"names":["genUID","a","Math","random","toString","replace","AwaitedIO","constructor","socket","opts","ctx","namespace","middleware","calls","local","remote","o","Object","keys","hasOwnProperty","on","msg","chain","filter","call","id","f","response","r","Error","register","use","fn","push","index","next","err","length","emit","message","callback","name","handler","res","args","Promise","update","forEach","module","exports"],"mappings":";;;;AACA;AACA,SAASA,MAAT,CAAgBC,CAAhB,EAAkB;AAAC,SAAOA,IAAE,CAACA,IAAEC,KAAKC,MAAL,KAAc,EAAd,IAAkBF,IAAE,CAAvB,EAA0BG,QAA1B,CAAmC,EAAnC,CAAF,GAAyC,CAAC,CAAC,GAAD,IAAM,CAAC,GAAP,GAAW,CAAC,GAAZ,GAAgB,CAAC,GAAjB,GAAqB,CAAC,IAAvB,EAA6BC,OAA7B,CAAqC,QAArC,EAA8CL,MAA9C,CAAhD;AAAsG;;AAEzH,MAAMM,SAAN,CAAgB;;AAEdC,cAAaC,MAAb,EAAqBC,OAAO,EAA5B,EAAgC;AAC9B;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA;AACA,SAAKE,GAAL,GAAW,EAAX;AACA;AACA,SAAKC,SAAL,GAAiB,YAAjB;AACA;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA;AACA,SAAKC,KAAL,GAAa,EAAb;AACA;AACA,SAAKC,KAAL,GAAa,EAAb;AACA;AACA,SAAKC,MAAL,GAAc,EAAd;AACA;AACA,SAAK,IAAIC,CAAT,IAAcC,OAAOC,IAAP,CAAYT,IAAZ,CAAd,EACE,IAAIA,KAAKU,cAAL,CAAoBH,CAApB,CAAJ,EACE,KAAKA,CAAL,IAAUP,KAAKO,CAAL,CAAV;AACJ;AACAR,WAAOY,EAAP,CAAW,KAAI,KAAKT,SAAU,SAA9B,EAAyCU,GAAD,IAAS;AAC/C,WAAKC,KAAL,CAAW,KAAKV,UAAhB,EAA4BS,GAA5B;AACD,KAFD;AAGA;AACAb,WAAOY,EAAP,CAAW,KAAI,KAAKT,SAAU,WAA9B,EAA2CU,GAAD,IAAS;AACjD,WAAKR,KAAL,GAAa,KAAKA,KAAL,CAAWU,MAAX,CAAkBC,QAAQ;AACrC,YAAIH,IAAII,EAAJ,KAAWD,KAAKC,EAApB,EAAwB;AACtBD,eAAKE,CAAL,CAAOL,IAAIM,QAAX;AACD;AACF,OAJY,CAAb;AAKD,KAND;AAOA;AACAnB,WAAOY,EAAP,CAAW,KAAI,KAAKT,SAAU,UAA9B,EAA0CU,GAAD,IAAS;AAChD,WAAKR,KAAL,GAAa,KAAKA,KAAL,CAAWU,MAAX,CAAkBC,QAAQ;AACrC,YAAIH,IAAII,EAAJ,KAAWD,KAAKC,EAApB,EAAwB;AACtBD,eAAKI,CAAL,CAAO,IAAIC,KAAJ,CAAUR,IAAIM,QAAd,CAAP;AACD;AACF,OAJY,CAAb;AAKD,KAND;AAOA;AACA,SAAKG,QAAL,CAAc,SAAd,EAAyB,MAAM;AAC7B,aAAO,KAAKhB,KAAZ;AACD,KAFD;AAGD;;AAED;AACAiB,MAAKC,EAAL,EAAS;AACP,SAAKpB,UAAL,CAAgBqB,IAAhB,CAAqBD,EAArB;AACA,WAAO,IAAP;AACD;;AAED;AACMV,OAAN,CAAaV,UAAb,EAAyBS,GAAzB,EAA8B;AAAA;;AAAA;AAC5B,UAAIa,QAAQ,CAAZ;AACA,YAAMC;AAAA,qCAAO,WAAOC,GAAP,EAAe;AAC1B,cAAIF,QAAQ,MAAKtB,UAAL,CAAgByB,MAAxB,IAAkC,CAACD,GAAvC,EAA4C;AAC1CF;AACA,kBAAM,MAAKtB,UAAL,CAAgBsB,QAAM,CAAtB,EAAyBC,IAAzB,EAA+B,MAAKzB,GAApC,EAAyCW,GAAzC,CAAN;AACD,WAHD,MAGO,IAAIe,GAAJ,EAAS;AACd,kBAAK5B,MAAL,CAAY8B,IAAZ,CAAkB,KAAI,MAAK3B,SAAU,UAArC,EAAgDyB,IAAIG,OAApD;AACD;AACF,SAPK;;AAAA;AAAA;AAAA;AAAA,UAAN;AAQA,aAAOJ,MAAP;AAV4B;AAW7B;;AAED;AACAK,WAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AAAA;;AACvB;AAAA,oCAAO,WAAOP,IAAP,EAAazB,GAAb,EAAkBW,GAAlB,EAA0B;AAC/B,YAAIA,IAAIoB,IAAJ,KAAaA,IAAjB,EAAuB;AACrB,cAAIE,MAAM,MAAMD,QAAQhC,GAAR,EAAa,GAAGW,IAAIuB,IAApB,CAAhB;AACA,cAAIL,UAAU;AACZd,gBAAIJ,IAAII,EADI;AAEZE,sBAAUgB;AAFE,WAAd;AAIA,iBAAKnC,MAAL,CAAY8B,IAAZ,CAAkB,KAAI,OAAK3B,SAAU,WAArC,EAAiD4B,OAAjD;AACD;AACD,eAAO,MAAMJ,MAAb;AACD,OAVD;;AAAA;AAAA;AAAA;AAAA;AAWD;;AAED;AACAL,WAAUW,IAAV,EAAgBC,OAAhB,EAAyB;AACvB,SAAK5B,KAAL,CAAWmB,IAAX,CAAgBQ,IAAhB;AACA,WAAO,KAAKV,GAAL,CAAU,KAAKS,QAAL,CAAcC,IAAd,EAAoBC,OAApB,CAAV,CAAP;AACD;;AAED;AACAlB,OAAMiB,IAAN,EAAY,GAAGG,IAAf,EAAqB;AACnB,WAAO,IAAIC,OAAJ,CAAY,CAACnB,CAAD,EAAIE,CAAJ,KAAS;AAC1B,UAAIH,KAAKzB,QAAT;AACA,WAAKa,KAAL,CAAWoB,IAAX,CAAgB,EAAER,EAAF,EAAMC,CAAN,EAASE,CAAT,EAAhB;AACA,WAAKpB,MAAL,CAAY8B,IAAZ,CAAkB,KAAI,KAAK3B,SAAU,SAArC,EAA+C,EAAEc,EAAF,EAAMgB,IAAN,EAAYG,IAAZ,EAA/C;AACD,KAJM,CAAP;AAKD;;AAED;AACME,QAAN,GAAgB;AAAA;;AAAA;AACd;AACA,UAAI/B,SAAS,MAAM,OAAKS,IAAL,CAAU,SAAV,CAAnB;AACA;AACA,aAAKT,MAAL,GAAc,EAAd;AACA;AACAA,aAAOgC,OAAP,CAAe,gBAAQ;AACrB,eAAKhC,MAAL,CAAY0B,IAAZ;AAAA,wCAAoB,WAAO,GAAGG,IAAV,EAAmB;AACrC,mBAAO,MAAM,OAAKpB,IAAL,CAAUiB,IAAV,EAAgB,GAAGG,IAAnB,CAAb;AACD,WAFD;;AAAA;AAAA;AAAA;AAAA;AAGD,OAJD;AAKA,aAAO,OAAK7B,MAAZ;AAXc;AAYf;;AA9Ga;;AAkHhBiC,OAAOC,OAAP,GAAiB3C,SAAjB","file":"index.js","sourcesContent":["\n// Generates a random unique identifier\nfunction genUID(a){return a?(a^Math.random()*16>>a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,genUID)};\n\nclass AwaitedIO {\n\n  constructor (socket, opts = {}) {\n    // The socket.io instance\n    this.socket = socket;\n    // Context to be passed to all calls\n    this.ctx = {};\n    // The namespace for the calls\n    this.namespace = 'awaited.io'\n    // The actions chain to process incoming calls\n    this.middleware = [];\n    // The enqueued calls\n    this.calls = [];\n    // The local calls available\n    this.local = []\n    // The remote calls available\n    this.remote = {};\n    // Apply options\n    for (let o of Object.keys(opts))\n      if (opts.hasOwnProperty(o))\n        this[o] = opts[o];\n    // Register a listener for all the calls\n    socket.on(`__${this.namespace}_call__`, (msg) => {\n      this.chain(this.middleware, msg);\n    });\n    // Register a listener for all the returns\n    socket.on(`__${this.namespace}_return__`, (msg) => {\n      this.calls = this.calls.filter(call => {\n        if (msg.id === call.id) {\n          call.f(msg.response);\n        }\n      })\n    });\n    // Register a listener for all the errors\n    socket.on(`__${this.namespace}_error__`, (msg) => {\n      this.calls = this.calls.filter(call => {\n        if (msg.id === call.id) {\n          call.r(new Error(msg.response));\n        }\n      });\n    });\n    // Handle the internal call to update remote calls\n    this.register('_update', () => {\n      return this.local;\n    });\n  }\n\n  // Registers a middleware function for the incoming calls\n  use (fn) {\n    this.middleware.push(fn);\n    return this;\n  }\n\n  // Executes a middleware chain\n  async chain (middleware, msg) {\n    let index = 0;\n    const next = async (err) => {\n      if (index < this.middleware.length && !err) {\n        index++;\n        await this.middleware[index-1](next, this.ctx, msg);\n      } else if (err) {\n        this.socket.emit(`__${this.namespace}_error__`, err.message);\n      }\n    }\n    return next();\n  }\n  \n  // Constructs the middleware function to handle a call\n  callback (name, handler) {\n    return async (next, ctx, msg) => {\n      if (msg.name === name) {\n        let res = await handler(ctx, ...msg.args);\n        let message = {\n          id: msg.id,\n          response: res\n        };\n        this.socket.emit(`__${this.namespace}_return__`, message);\n      }      \n      return await next();\n    }\n  }\n\n  // Registers a call to be remotely available\n  register (name, handler) {\n    this.local.push(name);\n    return this.use( this.callback(name, handler) );\n  }\n\n  // Makes a remote call\n  call (name, ...args) {\n    return new Promise((f, r)=> {\n      let id = genUID();\n      this.calls.push({ id, f, r });\n      this.socket.emit(`__${this.namespace}_call__`, { id, name, args })\n    });\n  }\n\n  // Updates the remote calls object\n  async update () {\n    // Get the remote calls names\n    let remote = await this.call('_update');\n    // Reset the remote object\n    this.remote = {};\n    // Fill the remote object with the calls wrappers\n    remote.forEach(name => {\n      this.remote[name] = async (...args) => {\n        return await this.call(name, ...args);\n      }\n    });\n    return this.remote;\n  }\n\n}\n\nmodule.exports = AwaitedIO;"]}