{"version":3,"sources":["../../src/examples/socket-io-example.js"],"names":["api","sqrt","ctx","num","Math","delaySqrt","secs","Promise","setTimeout","f","get","key","map","set","value","has","io","SocketIO","listen","Map","on","aio","AwaitedIO","socket","use","next","msg","now","Date","ms","console","log","name","registerAPI","ClientIO","aioClient","remote","update","process","exit","main","require"],"mappings":";;;+BAIA,aAAsB;;AAEpB;AACA,UAAMA,MAAM;;AAEV;AACAC,YAAM,UAACC,GAAD,EAAMC,GAAN;AAAA,eAAcC,KAAKH,IAAL,CAAUE,GAAV,CAAd;AAAA,OAHI;;AAKV;AACAE,iBAAW,UAACH,GAAD,EAAMC,GAAN,EAAWG,OAAO,CAAlB,EAAwB;AACjC,eAAO,IAAIC,OAAJ,CAAa,aAAK;AACvBC,qBAAW,YAAM;AACfC,cAAEL,KAAKH,IAAL,CAAUE,GAAV,CAAF;AACD,WAFD,EAEG,OAAOG,IAFV;AAGD,SAJM,CAAP;AAKD,OAZS;;AAcV;AACAI,WAAK,UAACR,GAAD,EAAMS,GAAN,EAAc;AACjB,eAAOT,IAAIU,GAAJ,CAAQF,GAAR,CAAYC,GAAZ,CAAP;AACD,OAjBS;AAkBVE,WAAK,UAACX,GAAD,EAAMS,GAAN,EAAWG,KAAX,EAAqB;AACxBZ,YAAIU,GAAJ,CAAQC,GAAR,CAAYF,GAAZ,EAAiBG,KAAjB;AACD,OApBS;AAqBVC,WAAK,UAACb,GAAD,EAAMS,GAAN,EAAc;AACjB,eAAOT,IAAIU,GAAJ,CAAQG,GAAR,CAAYJ,GAAZ,CAAP;AACD;;AAvBS,KAAZ;;AA2BA;AACA,UAAMK,KAAK,IAAIC,QAAJ,GAAeC,MAAf,CAAsB,IAAtB,CAAX;;AAEA;AACA,UAAMhB,MAAM;AACVU,WAAK,IAAIO,GAAJ;AADK,KAAZ;;AAIAH,OAAGI,EAAH,CAAM,YAAN,EAAoB,kBAAU;;AAE5B;AACA,YAAMC,MAAM,IAAIC,SAAJ,CAAcC,MAAd,EAAsB,EAAErB,GAAF,EAAtB,CAAZ;;AAEA;AACAmB,UAAIG,GAAJ;AAAA,sCAAQ,WAAOC,IAAP,EAAavB,GAAb,EAAkBwB,GAAlB,EAA0B;AAChC,gBAAMC,MAAM,IAAIC,IAAJ,EAAZ;AACA,gBAAMH,MAAN;AACA,gBAAMI,KAAK,IAAID,IAAJ,KAAaD,GAAxB;AACAG,kBAAQC,GAAR,CAAa,aAAYL,IAAIM,IAAK,MAAKH,EAAG,IAA1C;AACD,SALD;;AAAA;AAAA;AAAA;AAAA;;AAOA;AACAR,UAAIY,WAAJ,CAAgBjC,GAAhB;AAED,KAhBD;;AAkBA;AACA,UAAMuB,SAAS,IAAIW,QAAJ,CAAa,uBAAb,CAAf;AACA,UAAMC,YAAY,IAAIb,SAAJ,CAAcC,MAAd,CAAlB;;AAEA;AACA,UAAMa,SAAS,MAAMD,UAAUE,MAAV,EAArB;;AAEA;AACAP,YAAQC,GAAR,CAAY,cAAZ,GAA4B,MAAMK,OAAOnC,IAAP,CAAY,EAAZ,CAAlC;AACA6B,YAAQC,GAAR,CAAY,cAAZ,GAA4B,MAAMK,OAAO/B,SAAP,CAAiB,CAAjB,EAAoB,CAApB,CAAlC;;AAEA;AACA,UAAM+B,OAAOvB,GAAP,CAAW,MAAX,EAAmB,UAAnB,CAAN;AACAiB,YAAQC,GAAR,CAAY,cAAZ,GAA4B,MAAMK,OAAOrB,GAAP,CAAW,MAAX,CAAlC;AACAe,YAAQC,GAAR,CAAY,cAAZ,GAA4B,MAAMK,OAAO1B,GAAP,CAAW,MAAX,CAAlC;;AAEA4B,YAAQC,IAAR,CAAa,CAAb;AACD,G;;kBAzEcC,I;;;;;;;AAJf,MAAMlB,YAAYmB,QAAQ,aAAR,CAAlB;AACA,MAAMxB,WAAWwB,QAAQ,WAAR,CAAjB;AACA,MAAMP,WAAWO,QAAQ,kBAAR,CAAjB;;AA6EAD","file":"socket-io-example.js","sourcesContent":["const AwaitedIO = require('../index.js');\nconst SocketIO = require('socket.io');\nconst ClientIO = require('socket.io-client');\n\nasync function main() {\n\n  // Setup a testing API\n  const api = {\n    \n    // A silly sqrt function\n    sqrt: (ctx, num) => Math.sqrt(num),\n\n    // The same dummy function, this time async\n    delaySqrt: (ctx, num, secs = 1) => {\n      return new Promise (f => {\n        setTimeout(() => {\n          f(Math.sqrt(num))\n        }, 1000 * secs);\n      })\n    },\n\n    // Some functions using a shared Map instance\n    get: (ctx, key) => {\n      return ctx.map.get(key);\n    },\n    set: (ctx, key, value) => {\n      ctx.map.set(key, value);\n    },\n    has: (ctx, key) => {\n      return ctx.map.has(key);\n    }\n  \n  };\n\n  // Setup a socket.io server\n  const io = new SocketIO().listen(3131);\n\n  // Setup the context that all API calls will share\n  const ctx = {\n    map: new Map()\n  };\n\n  io.on('connection', socket => {\n\n    // Create an AwaitedIO instance to wrap the socket using the created context\n    const aio = new AwaitedIO(socket, { ctx });\n\n    // Register a middleware to debug things\n    aio.use(async (next, ctx, msg) => {\n      const now = new Date();\n      await next();\n      const ms = new Date() - now;\n      console.log(`-- call - ${msg.name} - ${ms}ms`);\n    });\n\n    // Register the api functions\n    aio.registerAPI(api)\n\n  });\n\n  // Let's create a client to connect to our API\n  const socket = new ClientIO('http://localhost:3131');\n  const aioClient = new AwaitedIO(socket);\n\n  // Get the wrapped remote functions (also available at aioClient.remote once aioClient.update has been called)\n  const remote = await aioClient.update();\n  \n  // Test the sqrt functions\n  console.log('-- response:', await remote.sqrt(16));\n  console.log('-- response:', await remote.delaySqrt(4, 2));\n\n  // Test the context functions\n  await remote.set('test', 1234567890);\n  console.log('-- response:', await remote.has('test'));\n  console.log('-- response:', await remote.get('test'));\n\n  process.exit(0);\n}\n\nmain();\n"]}