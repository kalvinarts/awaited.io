{"version":3,"sources":["../src/index.js"],"names":["genUID","a","Math","random","toString","replace","ExtendableError","message","name","constructor","Error","captureStackTrace","stack","AwaitedIOError","msg","AwaitedIO","socket","opts","ctx","namespace","middleware","calls","local","remote","debug","Object","keys","o","hasOwnProperty","on","chain","catch","err","console","log","filter","id","call","f","response","r","register","fn","push","index","next","length","error","emit","handler","args","use","callback","apiObj","Promise","forEach","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\n// This awesome function comes from: https://gist.github.com/jed/982883\n// Returns a random v4 UUID of the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\nfunction genUID(a){return a?(a^Math.random()*16>>a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,genUID)};\n\nclass ExtendableError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = this.constructor.name;\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else { \n      this.stack = (new Error(message)).stack; \n    }\n  }\n}\n\nclass AwaitedIOError extends ExtendableError {\n  constructor (msg, stack) {\n    super(msg);\n    if (stack)\n      this.stack = stack\n  }\n}\n\nclass AwaitedIO {\n\n  constructor (socket, opts = {}) {\n    // The socket.io instance\n    this.socket = socket;\n    // Context to be passed to all calls\n    this.ctx = {};\n    // The namespace for the calls\n    this.namespace = 'awaited.io'\n    // The actions chain to process incoming calls\n    this.middleware = [];\n    // The enqueued calls\n    this.calls = [];\n    // The local calls available\n    this.local = []\n    // The remote calls available\n    this.remote = {};\n    // Debug flag.\n    // If set to true any errors thrown by the exposed methods will\n    // be sent to the client. \n    // Errors returned by the middleware function are always sent\n    // to the client but if the debug flag is not set the stack\n    // trace will be stripped from the error \n    this.debug = false;\n    for (let o of Object.keys(opts))\n      if (opts.hasOwnProperty(o))\n        this[o] = opts[o];\n    // Register a listener for all the calls\n    socket.on(`__${this.namespace}_call__`, (msg) => {\n      this.chain(msg)\n      .catch((err) => {\n        console.log(err)\n      });\n    });\n    // Register a listener for all the returns\n    socket.on(`__${this.namespace}_return__`, (msg) => {\n      this.calls = this.calls.filter(call => {\n        if (msg.id === call.id) {\n          call.f(msg.response);\n          return false;\n        }\n        return true;\n      })\n    });\n    // Register a listener for all the errors\n    socket.on(`__${this.namespace}_error__`, (msg) => {\n      this.calls = this.calls.filter(call => {\n        if (msg.id === call.id) {\n          call.r(new AwaitedIOError(\n            msg.response.message,\n            msg.response.stack\n          ));\n          return false;\n        }\n        return true;\n      });\n    });\n    // Handle the internal call to update remote calls\n    this.register('_update', () => {\n      return this.local;\n    });\n  }\n\n  // Registers a middleware function for the incoming calls\n  use (fn) {\n    this.middleware.push(fn);\n    return this;\n  }\n\n  // Executes the middleware chain passing the message along\n  async chain (msg) {\n    let index = 0;\n    const next = async (err) => {\n      if (index < this.middleware.length && !err) {\n        index++;\n        await this.middleware[index-1](next, this.ctx, msg);\n      } else if (err) {\n        const error = {\n          message: err.message\n        }\n        if (this.debug)\n          error.stack = err.stack\n        this.socket.emit(`__${this.namespace}_error__`, {\n          id: msg.id,\n          response: error\n        });\n      }\n    }\n    return await next();\n  }\n  \n  // Constructs the middleware function to handle a call\n  callback (name, handler) {\n    return async (next, ctx, msg) => {\n      if (msg.name === name) {\n        try {\n          let response = await handler(ctx, ...msg.args);\n          let message = {\n            id: msg.id,\n            response\n          };\n          this.socket.emit(`__${this.namespace}_return__`, message);\n        } catch (err) {\n          if (this.debug)\n            return await next(err);\n          else\n            throw err;\n        }\n      }      \n      return await next();\n    }\n  }\n\n  // Registers a call to be remotely available\n  register (name, handler) {\n    this.local.push(name);\n    return this.use( this.callback(name, handler) );\n  }\n\n  // Registers a set of calls to be remotely available\n  registerAPI (apiObj) {\n    for (let name of Object.keys(apiObj)) {\n      if (apiObj.hasOwnProperty(name))\n        this.register(name, apiObj[name]);\n    }\n  }\n\n  // Makes a remote call\n  call (name, ...args) {\n    return new Promise((f, r)=> {\n      let id = genUID();\n      this.calls.push({ id, f, r });\n      this.socket.emit(`__${this.namespace}_call__`, { id, name, args })\n    });\n  }\n\n  // Updates the remote calls object\n  async update () {\n    // Get the remote calls names\n    let remote = await this.call('_update');\n    // Reset the remote object\n    this.remote = {};\n    // Fill the remote object with the calls wrappers\n    remote.forEach(name => {\n      this.remote[name] = async (...args) => {\n        return await this.call(name, ...args);\n      }\n    });\n    return this.remote;\n  }\n\n}\n\nmodule.exports = AwaitedIO;"]}